<?xml version="1.0"?>
<block>
  <name>UDP Sink (grnet)</name>
  <key>grnet_udp_sink</key>
  <category>[GrNet Networking Tools]</category>
  <import>import grnet</import>
  <make>grnet.udp_sink($type.size, 1, $addr, $port,$header,$payloadsize,$send_eof)</make>
	<param>
		<name>Input Type</name>
		<key>type</key>
		<type>enum</type>
		<option>
			<name>Complex</name>
			<key>complex</key>
			<opt>size:gr.sizeof_gr_complex</opt>
		</option>
		<option>
			<name>Float</name>
			<key>float</key>
			<opt>size:gr.sizeof_float</opt>
		</option>
		<option>
			<name>Int</name>
			<key>int</key>
			<opt>size:gr.sizeof_int</opt>
		</option>
		<option>
			<name>Short</name>
			<key>short</key>
			<opt>size:gr.sizeof_short</opt>
		</option>
		<option>
			<name>Byte</name>
			<key>byte</key>
			<opt>size:gr.sizeof_char</opt>
		</option>
	</param>

	<param>
		<name>Destination IP Address</name>
		<key>addr</key>
		<value>127.0.0.1</value>
		<type>string</type>
	</param>

	<param>
		<name>Destination Port</name>
		<key>port</key>
		<value>2000</value>
		<type>int</type>
	</param>
	<param>
		<name>Header</name>
		<key>header</key>
		<type>enum</type>
		<option>
			<name>None</name>
			<key>0</key>
		</option>
		<option>
			<name>64-bit Sequence Number</name>
			<key>1</key>
		</option>
		<option>
			<name>Sequence + 16-bit data size</name>
			<key>2</key>
		</option>
		<option>
			<name>CHDR (64-bit)</name>
			<key>4</key>
		</option>
	</param>
	<param>
		<name>UDP Packet Data Size</name>
		<key>payloadsize</key>
		<value>1472</value>
		<type>int</type>
	</param>
	<param>
		<name>Send Null Packet as EOF</name>
		<key>send_eof</key>
		<type>enum</type>
		<option>
			<name>No</name>
			<key>False</key>
		</option>
		<option>
			<name>Yes</name>
			<key>True</key>
		</option>
	</param>
	<check>$port &gt; 0</check>
	<check>$payloadsize &gt; 0</check>
	<sink>
		<name>in</name>
		<type>$type</type>
	</sink>
	<doc>
This block provides basic UDP data transmission capabilities with a few additional features for processing in custom receiving applications.  
A header can be added that provides 4 0xFF bytes to form a sync word along with a packet sequence number for detecting out-of-sequence 
packets as well as a packet size.  A 64-bit CRC field based on zlib's crc32 function can also be added to the end of the packets for integrity checking.  
Note that payload size impacts the overall size of a single UDP packet.  For a normal network, a payload size of 1472 (1500-28 for UDP headers) represents the max size for a standard UDP packet.  
For a Jumbo frames 8972 can be used (9000-28).  Be careful adjusting this parameter as you could inadvertently cause unnecessary packet fragmentation and reconstruction.

	</doc>
</block>
